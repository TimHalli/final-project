{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["API","WEB","App","useState","name","temp","fiveDays","day","defaultCity","setDefaultCity","term","setTerm","visibleItem","setVisibleItem","key","setKey","favorites","setFavorites","homeFlag","setHomeFlag","favFlag","setFavFlag","cls","setCls","autocompleteFlag","setAutocompleteFlag","addToFavorites","some","el","fav","useEffect","res","fetch","then","response","json","info","visible","searcher","filter","item","length","LocalizedName","toLowerCase","indexOf","Key","search","map","catch","err","Error","keyC","res2","dayName","c","week","arr","i","Date","DailyForecasts","getDay","Temperature","Maximum","Value","push","toFixed","renderWeather","home","className","onClick","e","type","scope","onChange","target","value","placeholder","id","style","maxWidth","display","index","copy","splice","deleteFav","favDetails","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d9c623a2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nexport const API = 'jkUWxcNASMvcAkZHF5gjCe2IGh15ybHZ';\nexport const WEB = 'http://dataservice.accuweather.com/';\n\nexport const locationApiUrl = () => `${WEB}locations/v1/topcities/150?apikey=${API}`;\nexport const weatherApiUrl = keyC => `${WEB}forecasts/v1/daily/5day/${keyC}?apikey=${API}`;\n\nexport default function App() {\n\n  const [ defaultCity, setDefaultCity ] = useState({\n    name: 'Tel Aviv',\n    temp: 0,\n    fiveDays: [\n      {\n        day: '',\n        temp: 0,\n      },\n    ],\n  });\n\n  const [ term, setTerm ] = useState('');\n  const [ visibleItem, setVisibleItem ] = useState('');\n  const [ key, setKey ] = useState(215854);\n  const [ favorites, setFavorites ] = useState([]);\n\n  const [ homeFlag, setHomeFlag ] = useState(true);\n  const [ favFlag, setFavFlag ] = useState(false);\n\n  const [ cls, setCls ] = useState(\"table-primary\");\n  const [ autocompleteFlag, setAutocompleteFlag ] = useState(true);\n\n  const search = (info, term) => {\n    \n    const searcher = info.filter(item => {\n    \n      if (term.length === 0) {\n        return info;\n      }\n      return item.LocalizedName.toLowerCase().indexOf(term.toLowerCase()) > -1;\n    });\n\n    let visible, key;\n\n    if (searcher.length === 0) {\n      visible = 'Tel Aviv';\n      key = 215854;\n    }\n    else {\n      visible = searcher[ 0 ].LocalizedName;\n      key = searcher[ 0 ].Key\n    }\n    setVisibleItem(visible);\n    setKey(key);\n  }\n \n  const onSearch = (e) => {\n\n    setTerm(() => e.target.value);\n    setAutocompleteFlag(true);\n\n    const fav = (el) => el.name === defaultCity.name;\n\n    if (favorites.some((el) => fav(el))) {\n      setCls(\"table-active\")\n    }\n    else {\n      setCls(\"table-primary\");\n    }\n  }\n\n  const addToFavorites = (defaultCity) => {\n\n    const fav = (el) => el === defaultCity;\n    \n    if (favorites.some((el) => fav(el))) {\n      setFavorites(favorites)\n    }\n    \n    else {\n      setFavorites([ ...favorites, defaultCity ]);\n      setCls(\"table-active\")\n    }\n    \n  }\n\n  const renderWeather = (res) => {\n    const week = [ 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' ];\n    let date, dayName, dailyWeather, c, arr = [];\n\n    for (let i = 0; i < 5; i++) {\n\n      date = new Date(res.DailyForecasts[ i ].Date);\n      \n      dayName = week[ date.getDay() ];\n\n      dailyWeather = res.DailyForecasts[ i ].Temperature;\n      c = (dailyWeather.Maximum.Value - 32) * 5 / 9;\n\n      arr.push({ day: dayName, temp: (c).toFixed() })\n    }\n\n    dailyWeather = res.DailyForecasts[ 0 ].Temperature;\n    c = (dailyWeather.Maximum.Value - 32) * 5 / 9;\n\n    setDefaultCity({\n      ...defaultCity,\n      name: visibleItem,\n      temp: (c).toFixed(),\n      fiveDays: arr\n    });\n  }\n \n  useEffect(() => {\n    const res = fetch(locationApiUrl())\n      .then(response => response.json())\n      .then(info => {\n\n        search(info, term);\n        info.map(item => {\n          if (item.LocalizedName === visibleItem) {\n            setDefaultCity({\n              ...defaultCity,\n              name: item.LocalizedName,\n    \n            })\n          }\n        })\n      })\n      .catch(err => {\n        throw new Error(`Could not fetch: ${err}. The API you used has expired. You need to use the new API. You can do this at https://developer.accuweather.com/`)\n      })\n    return () => res\n  }, [ term, term ]);\n\n\n\n\n  useEffect(() => {\n    const res2 = fetch(weatherApiUrl(key))\n      .then(response => response.json())\n      .then(res => {\n        renderWeather(res);\n      })\n      .catch(err => {\n        throw new Error(`Could not fetch: ${err}`)\n      })\n    return () => res2;\n  }, [ term, key ]);\n\n  const home = (\n    <div className=\"App\">\n      <div>\n    \n        <br />\n        <br />\n\n        <div className=\"form-group\">\n  \n          <button\n            onClick={(e) => addToFavorites(defaultCity)}\n            type=\"button\"\n            className=\"btn btn-success\"\n          >Add To Favorites</button>\n          <br /><br />\n          \n          {!autocompleteFlag ? null : visibleItem === 'Dhaka'\n            ? null : (<table className={\"table table-hover\"}>\n              <tbody>\n                <tr className={cls} >\n                  <th scope=\"row\"><h1>{defaultCity.name}</h1></th>\n                </tr>\n              </tbody>\n            </table>)\n          }\n          <input\n            onChange={onSearch}\n            className=\"form-control form-control-lg\"\n            type=\"text\"\n            placeholder=\"Search for a city...\"\n            id=\"inputLarge\" />\n        </div>\n \n    \n        <div className=\"card border-primary mb-3\" style={{ maxWidth: \"20rem\" }}>\n          <div className=\"card-body\">\n            <h4 className=\"card-title\">{visibleItem == 'Dhaka' ? 'Tel Aviv' : visibleItem}</h4>\n            <p className=\"card-text\">{defaultCity.temp}C</p>\n          </div>\n        </div>\n   \n        \n        <h1>Scattered Clouds</h1>\n\n        <div style={{ display: 'flex' }}>\n          {defaultCity.fiveDays.map((day, index) => (\n        \n            <div key={index} className=\"card border-primary mb-3\" style={{ maxWidth: \"20rem\" }}>\n     \n              <div className=\"card-body\">\n                <h4 className=\"card-title\">{day.day}</h4>\n                <p className=\"card-text\">{day.temp}C</p>\n              </div>\n            </div>\n     \n          ))}\n        </div>\n   \n  \n      </div>\n    </div>\n  )\n  \n  const deleteFav = (i) => {\n    \n    const copy = [ ...favorites ];\n    copy.splice(i, 1);\n\n    setFavorites(copy);\n  }\n\n  const favDetails = (item) => {\n    setHomeFlag(true);\n    setFavFlag(false);\n    setTerm(item.name);\n    setAutocompleteFlag(false)\n    setDefaultCity(item)\n    return item\n  }\n\n\n  const fav = (\n    <div>\n\n      <h1>Favorites</h1>\n  \n      <div style={{ display: 'flex' }}>\n        {!favorites\n          ? null\n          : favorites.map((item, index) => {\n        \n            return (\n              <div key={index + item.name}>\n                <div style={{ display: 'flex' }}>\n                  <div className=\"card border-success  mb-3\" style={{ maxWidth: \"20rem\" }}>\n                    <div className=\"card-header\"><h1 onClick={() => deleteFav(index)}>&times;</h1></div>\n                    <div onClick={() => favDetails(item)} className=\"card-body\">\n                      \n                      <h3 className=\"card-title\">{item.name}</h3>\n                      <h4 className=\"card-text\">{item.temp}C</h4>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )\n          })\n        }\n      </div>\n    </div>\n  )\n\n\n  const homeFunc = () => {\n    setHomeFlag(true)\n    setFavFlag(false)\n  }\n\n  const favFunc = () => {\n    setFavFlag(true)\n    setHomeFlag(false)\n  }\n  \n  return (\n    <div >\n      <div>\n        <br />\n      &nbsp;\n      <button onClick={homeFunc}\n          type=\"button\" className=\"btn btn-primary\">Home</button>\n      &nbsp;\n\n      <button onClick={favFunc}\n          type=\"button\" className=\"btn btn-primary\">Favorites</button>\n          &nbsp;\n          \n        <hr />\n      </div>\n\n      {homeFlag ? home : null}\n      {favFlag ? fav : null}\n    </div>\n  );\n}\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}